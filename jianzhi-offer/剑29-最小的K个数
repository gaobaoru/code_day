题目描述

输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。 

时间复杂度O（n）
class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        vector<int> result;
        int length = input.size();
        if(input.empty() || k<1 || k>length) return result;////注意输入检测
        int start = 0;
        int end = length - 1;
        int index = partition(input, start, end);
        while(index != k -1){
            if(index > k - 1){
                end = index - 1;
                index = partition(input, start, end);
            }else{
                start = index + 1;
                index = partition(input, start, end);
            }
        }
        for(int i = 0; i < k; ++i){
            result.push_back(input[i]);
        }
        return result;
    }
    int partition(vector<int> &input, int first, int last){
        int i = first;
        int j = last;
        int key = input[first];
        if(first < last){
            while(i<j){
                while(i<j && key <= input[j]) j--;
                if(i < j) input[i++] = input[j];
                while(i<j && key >= input[i]) i++;
                if(i<j) input[j--] = input[i];
            }
            input[i] = key;
        }
        return i;
    }
};

时间复杂度O（nlogk）
class Solution  
02.{  
03.    public:  
04.        vector<int> GetLeastNumbers_Solution(vector<int> input, int k)  
05.        {  
06.            int len = input.size();  
07.            vector<int> ans;  
08.            if(k<1 || k>len)  
09.                return ans;  
10.            for(int i = 0; i<len; i++)  
11.            {  
12.                if(ans.size()<k)  
13.                {  
14.                    ans.push_back(input[i]);  
15.                    if(ans.size()==k)  
16.                        sort(ans.begin(),ans.end());  
17.                }  
18.                else  
19.                {  
20.                    if(input[i]<ans[k-1])  
21.                    {  
22.                        ans[k-1] = input[i];  
23.                        if(k>1 && ans[k-1]<ans[k-2])  
24.                            sort(ans.begin(),ans.end());  
25.                    }  
26.                }  
27.            }  
28.            return ans;  
29.        }  
30.};  

