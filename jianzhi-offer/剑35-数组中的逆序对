题目描述

在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组,求出这个数组中的逆序对的总数P。
并将P对1000000007取模的结果输出。 即输出P%1000000007 

输入描述:
题目保证输入的数组中没有的相同的数字

数据范围：

	对于%50的数据,size<=10^4

	对于%75的数据,size<=10^5

	对于%100的数据,size<=2*10^5

输入例子:
1,2,3,4,5,6,7,0


输出例子:
7
//时间复杂度为O(nlogn)
class Solution {
public:
    int InversePairs(vector<int> data) {
        if(data.empty()) return 0;
        int length = data.size();
        vector<int> copy(length);
        for(int i = 0; i < length; ++i){
            copy[i] = data[i];
        }
        int count = RecursiveInversePairs(data, copy, 0, length - 1)%1000000007;
        return count%1000000007;
    }
    int RecursiveInversePairs(vector<int> &data, vector<int> &copy, int start, int end){
        if(start == end){
            copy[start] = data[start];
            return 0;
        }
        int len = (end - start) / 2;
        int left = RecursiveInversePairs(copy, data, start, start + len)%1000000007;
        int right = RecursiveInversePairs(copy, data, start+len+1, end)%1000000007;
         
        int i = start+len;
        int j = end;
        int indexCopy = end;
         
        int count = 0;
        while(i >= start && j >= start+len+1){
            if(data[i] > data[j]){
                copy[indexCopy--] = data[i--];
                count += j - start - len;
                if(count > 1000000007)
                    count %= 1000000007;
            }else{
                copy[indexCopy--] = data[j--];
            }
        }
        for(; i>=start; --i)
            copy[indexCopy--] = data[i];
        for(; j>=start+len+1; --j)
            copy[indexCopy--] = data[j];
         
        return (left+right+count)%1000000007;
    }
};

