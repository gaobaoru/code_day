题目描述

给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。
例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，
他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： 
{[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。 

////总的时间复杂度为O(n)，获取最大值的时间复杂度为O(1)
class Solution {
public:
    vector<int> maxInWindows(const vector<int>& num, unsigned int size)
    {
        vector<int> result;
        if(num.size() >= size && size >= 1){
            deque<int> IndexDeque;
            for(int i = 0; i < size; i++){
                while(!IndexDeque.empty() && num[i] >= num[IndexDeque.back()])
                    IndexDeque.pop_back();
                IndexDeque.push_back(i);
            }
            for(int i = size; i < num.size(); i++){
                result.push_back(num[IndexDeque.front()]);
                
                while(!IndexDeque.empty() && num[i] >= num[IndexDeque.back()])
                    IndexDeque.pop_back();
                if(!IndexDeque.empty() && IndexDeque.front() <= (int)(i - size))
                    IndexDeque.pop_front();
                
                IndexDeque.push_back(i);
            }
            result.push_back(num[IndexDeque.front()]);
        }
        return result;
    }
};
